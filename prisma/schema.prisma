generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum SubscriptionType {
  PRIVATE
  NOT_PRIVATE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum UserType {
  COACH
  SECRETARY
  TRAINEE
}

model Coach {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @unique
  fullName    String
  gender      Gender
  dob         DateTime @map("date_of_birth")
  password    String
}

model Secretary {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @unique
  fullName    String
  gender      Gender
  dob         DateTime @map("date_of_birth")
  password    String
}

model Trainee {
  id                    Int                @id @default(autoincrement())
  parcode               String             @unique
  phoneNumber           String             @unique
  fullName              String
  gender                Gender
  dob                   DateTime           @map("date_of_birth")
  password              String
  subscriptionType      SubscriptionType
  subscriptionStatus    SubscriptionStatus
  subscriptionDate      DateTime
  subscriptionStartDate DateTime
  subscriptionMonths    Int
  subscriptionClasses   Int
  remainingClasses      Int
  subscriptionEndDate   DateTime
  paid                  Int
  reminder              Int
  idFace               String             @default("")
  idBack               String             @default("")

  // optional
  trainingName   String?
  offerName      String?
  medicalProblem String?
  surgeries      Boolean?
  goal           String?
  sundayNote     String?
  mondayNote     String?
  tuesdayNote    String?
  wednesdayNote  String?
  thursdayNote   String?
  fridayNote     String?
  saturdayNote   String?
  generalNote    String?

  inBodies    InBody[]     @relation("TraineeInBodies")
  attendances Attendance[] @relation("TraineeAttendances")
}

model InBody {
  id        Int      @id @default(autoincrement())
  traineeId Int
  trainee   Trainee  @relation("TraineeInBodies", fields: [traineeId], references: [id])
  date      DateTime @default(now())

  // Body measurements
  length     Float
  weight     Float
  shoulder   Float
  chest      Float
  belowChest Float
  middle     Float
  stomach    Float
  buttocks   Float
  thigh      Float
  arm        Float

  // Health metrics
  BMI              Float
  currentSituation String
  dailyWaterNeed   Float
  caloriesRequired Float
  muscleWeight     Float
  fatMass          Float
  boneDensity      Float
  bellyFat         Float
  dietFile         String?
}

model Attendance {
  id        Int      @id @default(autoincrement())
  traineeId Int
  trainee   Trainee  @relation("TraineeAttendances", fields: [traineeId], references: [id])
  date      DateTime @default(now())
}
